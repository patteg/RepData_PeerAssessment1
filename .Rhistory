View(amzn)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(amzn)
year(amzn.row.names)
year(amzn$row.names)
format(amzn$row.names, '%Y')
amzn$row.names
rownames(amzn)
row.names(amzn)
View(amzn)
index(amzn)
format(index(amzn), '%Y'
)
count(format(index(amzn), '%Y')==2013)
format(index(amzn), '%Y')==2013
count(format(index(amzn), '%Y')==2013)
amzn[(format(index(amzn), '%Y')==2013),]
x<-amzn[(format(index(amzn), '%Y')==2013),]
View(x)
count(x)
nrows(x)
nrow(x)
weekdays
x<-amzn[(format(index(amzn), '%Y')==2012),]
x
x<-amzn[(format(index(amzn), '%Y')==2012),]
weekdays(index(x))
weekdays(index(x)=='Monday')
x[weekdays(index(x)=='Monday'),]
grep(weekdays(index(x)=='Monday'), 'Monday')
library(lubridate)
install.packages("lubridate")
library(lubridate)
x<-amzn[(format(index(amzn), '%Y')==2012),]
wday(x)
x
wday(index(x)
)
wday(x)
?wday
b<- as.Date('2014-05-27')
wday(b)
b<- as.Date('2014-05-31')
wday(b)
b<- as.Date('2014-05-31', label=TRUE)
wday(b, label=TRUE)
z<-wday(b, label=TRUE)
class(z)
z(1)
z[1]
z[Wed]
z$Wed
z<-wday(b)
z
z<-wday(index(x))
z
z<-wday(index(x))
nrow(z==1)
Z
count(z==1)
z==1
z<-wday(index(x))
z
count(z==2)
nrow(z==2)
which(z,2)
?which
which(z==2)
count(which(z==2))
?count
nrow(which(z==2))
sum(which(z==2))
z[z==2]
nrow(z[z==2])
nrow(z[z==2],TRUE)
nrow(z[z==2],arr.ind=TRUE)
nrow(z[z==2])
q<-(z[z==2])
Q
q
nrow(q)
class(q)
?nrow
??count
length(z)
length(q)
library(lubridate)
x<-amzn[(format(index(amzn), '%Y')==2012),]
z<-wday(index(x))
q<-(z[z==2])
length(q)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
x<-amzn[(format(index(amzn), '%Y')==2013),]
nrow(x)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv', 'ds.csv')
download.file('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv', 'ds.csv')
ds <- read.csv('./ds.csv')
?strsplit
View(ds)
strsplit(names(ds),'wgtp')
strnames <-strsplit(names(ds),'wgtp')
View(ds)
strnames[1]
strnames[2]
strnames[3]
strnames[4]
strnames[1:10]
strnames <-strsplit(names(ds),'D')
strnames[1:10]
strnames[7]
class(strnames[7])
class(strnames[7,1])
class(strnames[7][1])
class(strnames[7][2])
class(strnames[7][])
class(strnames[7](1))
class(strnames[7](A)
)
class(strnames[7](1))
strnames[123]
strsplit(names(ds),'wgtp')
strnames[[123]]
strnames[[188]]
strsplit(names(ds),'D')
strnames <-strsplit(names(ds),'D')
strnames[1]
strnames[7]
strnames[3]
strnames <-strsplit(names(ds),'G')
strnames[8]
strnames <-strsplit(names(ds),'wgtp')
strnames[123]
strnames[[123]]
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv', 'gdp.csv')
download.file('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv', 'gdp.csv')
ds <- read.csv('./gdp.csv')
View(ds)
gsub(',','',X.3)
gsub(',','',ds$X.3)
mean(gsub(',','',ds$X.3))
mean(gsub(',','',ds$X.3), na.rm=TRUE)
mean(as.numeric(gsub(',','',ds$X.3), na.rm=TRUE))
mean(as.numeric(gsub(',','',ds$X.3)), na.rm=TRUE)
ds$new <-as.numeric(gsub(',','',ds$X.3))
View(ds)
mean(ds$new)
mean(ds$new, rm.na=TRUE)
class(ds$new)
?mena
?mean
mean(ds$new, na.rm=TRUE)
ds$new <-as.numeric(gsub(',','',ds$X.3[1:219]))
mean(as.numeric(gsub(',','',ds$X.3[1:219])), na.rm=TRUE)
grep('^United',ds$X.3)
grep('^United',ds$X.2)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv','gdp.csv')
download.file('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv','gdp.csv')
download.file('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv, 'country.csv')
download.file('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv', 'country.csv')
ds1 <- read.csv('./gdp.csv')
ds2 <- read.csv('./country.csv')
View(ds1)
View(ds2)
View(ds1)
View(ds2)
View(ds1)
ds_merg <- merge(ds1, ds2, x.by=X, y.by=CountryCode)
View(ds_merg)
?merge
ds_merg <- merge(ds1, ds2, by.x=X, by.y=CountryCode)
ds_merg <- merge(ds1, ds2, by.x=ds1$X, by.y=ds2$CountryCode)
ds_merg <- merge(ds1[5:219,], ds2, by.x=ds1$X, by.y=ds2$CountryCode)
d1a <- d1[5:219,]
ds1a <- ds1[5:219,]
ds_merg <- merge(ds1a, ds2, by.x=ds1a$X, by.y=ds2$CountryCode)
View(ds1a)
unique
?unique
ds1a$X
class(ds1a$X)
unique(ds1a$X)
ds1a$ABW
nrow(unique(ds1a$X))
length(unique(ds1a$X))
length((ds1a$X))
ds1a[191]
ds1a[191,]
ds1a[191,]<- NULL
ds1a<- ds1a[-191]
ds_merg <- merge(ds1a, ds2, by.x=ds1a$X, by.y=ds2$CountryCode)
?merge
ds_merg <- merge(ds1a, ds2, by.'X', by.y='CountryCode')
ds_merg <- merge(ds1a, ds2, by.x='X', by.y='CountryCode')
View(ds_merg)
ds_merg <- merge(ds1, ds2, by.x='X', by.y='CountryCode')
View(ds_merg)
View(ds_merg)
names(ds_merg)
grep('^Fiscal year end: June',ds_merg$Special.Notes)
download.file('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv', 'ds.csv')
ds <- read.csv('./ds.csv')
strnames <-strsplit(names(ds),'wgtp')
strnames[[123]]
strnames[123]
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
x<-amzn[(format(index(amzn), '%Y')==2013),]
nrow(x)
library(lubridate)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
x<-amzn[(format(index(amzn), '%Y')==2012),]
nrow(x)
library(lubridate)
x<-amzn[(format(index(amzn), '%Y')==2012),]
z<-wday(index(x))
q<-(z[z==2])
length(q)
install.packages("knitr")
install.packages("slidify")
library(devtools)
install.packages("devtools")
library(devtools)
?devtools
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
author("mydeck")
library(slidify)
author('mydeck')
slidify('index.Rmd')
install.packages("googleVis")
?googleVis
??googlevi
??googlevis
?googlevis
??googlevis
?google
library(googleVis)
demo(googleVis)
rm(list=ls())
setwd('/patteg/RepData_PeerAssessment1')
setwd('/patteg/RepData_PeerAssessment1/')
setwd('Users/patteg/RepData_PeerAssessment1/')
setwd('/Users/patteg/RepData_PeerAssessment1/')
data <-read.csv('./activity.csv')
View(data)
?aggregate
aggregate(data, by=date, FUN=mean)
aggregate(data, by=as.factor(date), FUN=mean)
daily_data<-ddply(data,'date',summarise, avg=sum(interval,na.rm=TRUE))
library(ddply)
library(plyr)
setwd('/Users/patteg/RepData_PeerAssessment1/')
data <-read.csv('./activity.csv')
# What is the mean total number of steps taken per day?
# sum daily steps taken
daily_data<-ddply(data,'date',summarise, avg=sum(interval,na.rm=TRUE))
View(daily_data)
daily_data<-ddply(data,'date',summarise, avg=sum(steps,na.rm=TRUE))
View(daily_data)
with(daily_data, mean(steps, na.rm=TRUE))
with(daily_data, mean(dailySteps, na.rm=TRUE))
daily_data<-ddply(data,'date',summarise, dailySteps=sum(steps,na.rm=TRUE))
with(daily_data, mean(dailySteps, na.rm=TRUE))
with(daily_data, mean(dailySteps, na.rm=TRUE), median(dailySteps, na.rm=TRUE))
with(daily_data, mean(dailySteps, na.rm=TRUE), median(dailySteps, na.rm=TRUE))
mean(daily_data$dailySteps, na.rm=TRUE)
median(daily_data$dailySteps, na.rm=TRUE)
daily_data<-ddply(data,'date',summarise, steps=sum(steps,na.rm=TRUE))
#calc mean and median
mean(daily_data$steps, na.rm=TRUE)
median(daily_data$steps, na.rm=TRUE)
?hist
hist(daily_data$steps)
hist(daily_data$steps, xlab='Number of Steps', main='Total Number of Steps Taken Each Day')
?plot
interval_data<-ddply(data,'interval', summarise, steps=mean(steps, na.rm=TRUE))
View(interval_data)
plot(interval_data$interval, interval_data,steps)
plot(interval_data$interval, interval_data$steps)
with(interval_data, plot(interval, steps))
with(interval_data, plot(interval, steps, type='l'))
with(interval_data, plot(interval, steps, type='l', xlab='Time Interval', ylab='Steps Taken', main='Average Steps Taken per Time Interval'))
?max
max(interval_data$steps, na.rm=TRUE)
which(max(interval_data$steps, na.rm=TRUE))
?which
which.max(interval_data$steps, na.rm=TRUE)
max(which(interval_data$steps))
?which.min
which.max(interval_data$steps)
interval_data[which.max(interval_data$steps),]
View(daily_data)
merge(data, daily_data, by.x='date', by.y='date')
imp_data<-merge(data, daily_data, by.x='date', by.y='date')
View(imp_data)
imp_data<-merge(data, interval_data, by.x='interval', by.y='interval')
View(imp_data)
tail(imp_data)
imp_data#steps.x<-elseif(imp_data$steps.x='NA', imp_data$steps.y)
View(imp_data)
imp_data$steps.x<-elseif(is.na(imp_data$steps), imp_data$steps.y)
imp_data$steps.x<-ifelse(is.na(imp_data$steps), imp_data$steps.y)
is.na(imp_data$steps.x)
is.na(imp_data$steps.x[1:15,])
is.na(imp_data$steps.x(1:15,)
)
is.na(imp_data[1:5,]$steps.x
)
imp_data$steps.x<-ifelse(is.na(imp_data$steps.x), imp_data$steps.y)
imp_data$steps.x<-ifelse(is.na(imp_data$steps.x), imp_data$steps.y, imp_data$steps.x)
View(imp_data)
imp_data<-merge(data, interval_data)
View(imp_data)
mrege
?merge
imp_data<-merge(data, interval_data, by.x='interval', by.y='interval')
imp_data$steps.x<-ifelse(is.na(imp_data$steps.x), imp_data$steps.y, imp_data$steps.x)
imp_data<-imp_data[,-4]
rownames(imp_data)<-c('steps','interval','date')
View(imp_data)
#Imputing missing values
imp_data<-merge(data, interval_data, by.x='interval', by.y='interval')
imp_data$steps.x<-ifelse(is.na(imp_data$steps.x), imp_data$steps.y, imp_data$steps.x)
imp_data<-imp_data[,c(2,3,1)]
rownames(imp_data)<-c('steps','interval','date')
View(imp_data)
length(imp_data)
?rownames
colnames(imp_data)<-c('steps','interval','date')
View(imp_data)
colnames(imp_data)<-c('steps','date','interval')
imp_data[order(date),]
imp_data[order(date),]
?order
imp_data[order(imp_date$date),]
imp_data[order(imp_data$date),]
imp_data[order(date),]
imp_data[order(imp_data$date),]
imp_data<-imp_data[order(imp_data$date, imp_data$interval),]
View(imp_data)
imp_data<-merge(data, interval_data, by.x='interval', by.y='interval')
imp_data$steps.x<-ifelse(is.na(imp_data$steps.x), imp_data$steps.y, imp_data$steps.x)
imp_data<-imp_data[,c(2,3,1)]
colnames(imp_data)<-c('steps','date','interval')
View(imp_data)
row.names(imp_data)<-NULL
View(imp_data)
daily_imp_data<-ddply(imp_data,'date',summarise, steps=sum(steps,na.rm=TRUE))
hist(daily_imp_data$steps, xlab='Number of Steps', main='Total Number of Steps Taken Each Day')
mean(daily_imp_data$steps, na.rm=TRUE)
median(daily_imp_data$steps, na.rm=TRUE)
daily_data<-ddply(data,'date',summarise, steps=sum(steps,na.rm=TRUE))
hist(daily_data$steps, xlab='Number of Steps', main='Total Number of Steps Taken Each Day')
#calc mean and median
mean(daily_data$steps, na.rm=TRUE)
median(daily_data$steps, na.rm=TRUE)
mean(daily_imp_data$steps, na.rm=TRUE)
median(daily_imp_data$steps, na.rm=TRUE)
daily_imp_data<-ddply(imp_data,'date',summarise, steps=sum(steps,na.rm=TRUE))
hist(daily_imp_data$steps, xlab='Number of Steps', main='Total Number of Steps Taken Each Day')
?weekdays
weekdays(daily_imp_data$date)
weekdays('01/01/2014')
weekdays(as.date(daily_imp_data$date))
weekdays(as.Date(daily_imp_data$date))
daily_imp_data$dayofweek<-weekdays(as.Date(daily_imp_data$date))
daily_imp_data$weektype<-ifelse(daily_imp_data$dayofweek==c('Saturday', 'Sunday'), 'weekend', 'weekday')
View(daily_imp_data)
View(daily_imp_data)
daily_imp_data<-ddply(imp_data,'date',summarise, steps=sum(steps,na.rm=TRUE))
hist(daily_imp_data$steps, xlab='Number of Steps', main='Total Number of Steps Taken Each Day')
#calc mean and median
mean(daily_imp_data$steps, na.rm=TRUE)
median(daily_imp_data$steps, na.rm=TRUE)
# Are there differences in activity patterns between weekdays and weekends?
daily_imp_data$dayofweek<-weekdays(as.Date(daily_imp_data$date))
daily_imp_data$weektype<-ifelse(daily_imp_data$dayofweek==c('Saturday', 'Sunday'), 'weekend', 'weekday')
daily_imp_data$weektype<-ifelse(daily_imp_data$dayofweek=='Saturday' | daily_imp_data$dayofweek== 'Sunday'), 'weekend', 'weekday')
daily_imp_data$weektype<-ifelse(daily_imp_data$dayofweek=='Saturday' | daily_imp_data$dayofweek== 'Sunday'),
'weekend', 'weekday'))
daily_imp_data$weektype<-ifelse(daily_imp_data$dayofweek=='Saturday' | daily_imp_data$dayofweek== 'Sunday'),
daily_imp_data$weektype<-ifelse(daily_imp_data$dayofweek=='Saturday' | daily_imp_data$dayofweek== 'Sunday'), 'weekend', 'weekday'))
daily_imp_data$weektype<-ifelse((daily_imp_data$dayofweek=='Saturday' | daily_imp_data$dayofweek== 'Sunday'), 'weekend', 'weekday')
View(daily_imp_data)
daily_imp_data$weektype<-ifelse((daily_imp_data$dayofweek=='Saturday' |
daily_imp_data$dayofweek== 'Sunday'), 'weekend', 'weekday')
daily_imp_data$weektype<-as.factor(daily_imp_data$weektype)
View(daily_imp_data)
summary(daily_imp_data)
str(daily_imp_data)
?plot
?plot
imp_data$dayofweek<-weekdays(as.Date(imp_data$date))
imp_data$weektype<-ifelse((imp_data$dayofweek=='Saturday' |
imp_data$dayofweek== 'Sunday'), 'weekend', 'weekday')
View(imp_data)
?ddply
interval_data<-ddply(data,'interval', summarise, steps=mean(steps, na.rm=TRUE))
interval_data<-ddply(data,c('interval','weektype'), summarise, steps=mean(steps, na.rm=TRUE))
interval_data<-ddply(imp_data,c('interval','weektype'), summarise, steps=mean(steps, na.rm=TRUE))
View(interval_data)
View(daily_data)
interval_data<-ddply(imp_data,c('weektype'), summarise, steps=mean(steps, na.rm=TRUE))
View(interval_data)
interval_data<-ddply(imp_data,c('weektype','interval'), summarise, steps=mean(steps, na.rm=TRUE))
View(interval_data)
interval_data[order(interval_data$weektype),]
with(interval_data, xyplot(interval~steps|weektype, type='l', xlab='Time Interval',
ylab='Steps Taken', main='Average Steps Taken per Time Interval'))
library(lattice)
with(interval_data, xyplot(interval~steps|weektype, type='l', xlab='Time Interval',
ylab='Steps Taken', main='Average Steps Taken per Time Interval'))
?xyplot
layout=c(1,3))
with(interval_data, xyplot(interval~steps|weektype,
type='l',
xlab='Time Interval',
ylab='Steps Taken',
main='Average Steps Taken per Time Interval'),
layout=c(1,3))
with(interval_data, xyplot(interval~steps|weektype,
type='l',
xlab='Time Interval',
ylab='Steps Taken',
main='Average Steps Taken per Time Interval'),
layout=c(2,1))
with(interval_data, xyplot(interval~steps|weektype,
type='l',
xlab='Time Interval',
ylab='Steps Taken',
main='Average Steps Taken per Time Interval'),
layout=c(2,1))
with(interval_data, xyplot(interval~steps|weektype,
type='l',
xlab='Time Interval',
ylab='Steps Taken',
main='Average Steps Taken per Time Interval'),
layout=c(1,3))
with(interval_data, xyplot(interval~steps|weektype,
type='l',
xlab='Time Interval',
ylab='Steps Taken',
main='Average Steps Taken per Time Interval'),
layout=c(1,3))
with(interval_data, xyplot(interval~steps|weektype,
type='l',
xlab='Time Interval',
ylab='Steps Taken',
main='Average Steps Taken per Time Interval'),
layout=c(3,1))
?layout
with(interval_data, xyplot(interval~steps|weektype,
type='l',
xlab='Time Interval',
ylab='Steps Taken',
main='Average Steps Taken per Time Interval'),
layout=c(1,1))
xyplot(interval~steps|weektype,interval_data,
type='l',
xlab='Time Interval',
ylab='Steps Taken',
main='Average Steps Taken per Time Interval'),
xyplot(interval~steps|weektype,interval_data,
type='l',
xlab='Time Interval',
ylab='Steps Taken',
main='Average Steps Taken per Time Interval',
layout=c(1,1))
xyplot(interval~steps|weektype,interval_data,
type='l',
xlab='Time Interval',
ylab='Steps Taken',
main='Average Steps Taken per Time Interval',
layout=c(2,1))
xyplot(interval~steps|weektype,interval_data,
type='l',
xlab='Time Interval',
ylab='Steps Taken',
main='Average Steps Taken per Time Interval',
layout=c(1,2))
xyplot(steps~interval|weektype,interval_data,
type='l',
xlab='Time Interval',
ylab='Steps Taken',
main='Average Steps Taken per Time Interval',
layout=c(1,2))
xyplot(steps~interval|weektype,interval_data,
type='l',
xlab='Time Interval',
ylab='Steps Taken',
main='Average Steps Taken per Time Interval')
xyplot(steps~interval|weektype,interval_data,
type='l',
xlab='Time Interval',
ylab='Steps Taken',
main='Average Steps Taken per Time Interval',
layout=c(1,2))
?xyplot
str(data)
View(data)
?is.na
is.na(data$steps)
?na.count
sum(is.na(data$steps))
sum(!is.na(data$steps))
